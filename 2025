package com.lgcns.test;

import java.util.Scanner;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.client.util.StringContentProvider;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.server.*;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.servlet.ServletHolder;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class RunManager {

	public static void main(String[] args) throws Exception {
		
		//Map<String, String> dictionary = loadDictionary("DICTIONARY.TXT");
        //Set<String> stopwords = loadStopwords("STOPWORD.TXT");
       // Map<String, ModelInfo> models = loadModels("MODELS.JSON");
		

        
		Server server = new Server();
		ServerConnector http = new ServerConnector(server);
		http.setHost("127.0.0.1");
		http.setPort(8080);
		server.addConnector(http);

		 // 서블릿 핸들러 설정
        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);

        // 서블릿 추가
        context.addServlet(new ServletHolder(new MyServlet()), "/*");

		server.start();
		server.join();
	 }

	public static class MyServlet extends HttpServlet {
        protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
            System.out.println("Request URL: " + req.getRequestURL());

            // 요청 본문 읽기
            StringBuilder requestBody = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(req.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    requestBody.append(line);
                }
            }

            System.out.println("Request Body: " + requestBody.toString());
            
    		String filePath = "DICTIONARY.TXT";
    		// 파일에서 단어와 값을 읽어와서 맵에 저장
            java.util.Map<String, String> wordToValueMap = new java.util.HashMap<>();
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split("#");
                    if (parts.length == 2) {
                        String word = parts[0].trim();
                        String value = parts[1].trim();
                        wordToValueMap.put(word, value);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            filePath = "STOPWORD.TXT";
    		// 파일에서 단어와 값을 읽어와서 맵에 저장
            List<String> lines = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = br.readLine()) != null) {
                	lines.add(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            StringBuilder jsonContent = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader("MODELS.JSON"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    jsonContent.append(line);
                }
            } catch (FileNotFoundException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}

         // JSON 파싱
            JsonParser parser=new JsonParser();
            JsonObject jsonObject = (JsonObject)parser.parse(jsonContent.toString());
            JsonArray modelsArray = jsonObject.getAsJsonArray("models");
            
         // 모델 정보를 저장할 Map
            Map<String, ModelInfo> models = new HashMap<>();
            
         // 모델 배열 순회
            for (int i = 0; i < modelsArray.size(); i++) {
            	JsonObject modelObject = modelsArray.get(i).getAsJsonObject();
                String modelname = modelObject.get("modelname").getAsString();
                String url = modelObject.get("url").getAsString();

                // 클래스 정보 추출
                JsonArray classesArray = modelObject.getAsJsonArray("classes");
                List<Map<String, String>> classes = new ArrayList<>();
                for (int j = 0; j < classesArray.size(); j++) {
                    JsonObject classObject = classesArray.get(j).getAsJsonObject();
                    Map<String, String> classMap = new HashMap<>();
                    classMap.put("code", classObject.get("code").getAsString());
                    classMap.put("value", classObject.get("value").getAsString());
                    classes.add(classMap);
                }

                // ModelInfo 객체 생성 및 Map에 저장
                ModelInfo modelInfo = new ModelInfo();
                modelInfo.setModelname(modelname);
                modelInfo.setClasses(classes);
                modelInfo.setUrl(url);
                models.put(modelname, modelInfo);
            }
            
         // JSON 파싱
            parser=new JsonParser();
            jsonObject = (JsonObject)parser.parse(requestBody.toString());
            JsonArray queriesArray = jsonObject.getAsJsonArray("queries");
            String modelname = jsonObject.get("modelname").getAsString();
         // 응답으로 오는 감정 값을 JSONArray로 저장
            JsonArray emotionArray = new JsonArray();
            // queries 배열 순회
            for (int j = 0; j < queriesArray.size(); j++) {
                String query = queriesArray.get(j).getAsString().trim();
                System.out.println("Query: " + query);
                // 여기에 쿼리를 처리하는 로직을 추가할 수 있습니다.
                String []arrays;
    	        arrays=query.split(" ");//0 VIEW_AD1 값 split
    	        String ans="";
    	        for (int i = 0; i < arrays.length; i++) {
    	        	arrays[i] = arrays[i].toLowerCase();
    	        	String target =wordToValueMap.get(arrays[i]);
    	        	if(!lines.contains(target)) {
    	        		ans+=target+" ";
    	        	}
    	        }
    	        System.out.println(ans.trim());
    	        ModelInfo modelInfo = models.get(modelname);
    	        
    	        JsonObject reqJsonObject = new JsonObject();
    	        reqJsonObject.addProperty("query", ans.trim());
    	        
    	        HttpClient httpClient = new HttpClient();
    			try {
					httpClient.start();
					ContentResponse contentRes = httpClient.newRequest(modelInfo.getUrl()).method(HttpMethod.POST)
	    					.header("Content-Type", "application/json")
	    					.content(new StringContentProvider(reqJsonObject.toString()),"application/json")
	    					.send();
					System.out.println("check:::"+contentRes.getContentAsString());
					 parser=new JsonParser();
			         jsonObject = (JsonObject)parser.parse(contentRes.getContentAsString());
			         String emotion = jsonObject.get("result").getAsString();
			         List<Map<String, String>> model=modelInfo.getClasses();
			         for (int i = 0; i < model.size(); i++) {
			        	 Map<String, String> find = model.get(i);
			        	 String target=find.get("code");
			        	 System.out.println("target:::"+target);
		    	        	if(target.equalsIgnoreCase(emotion)) {
		    	        		System.out.println("find:::"+find.get("value"));
		    	        		emotionArray.add(find.get("value"));
		    	        	}
		    	        }
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    			
    			
            }

         // 결과 JSON 객체 생성
            JsonObject resultJsonObject = new JsonObject();
            resultJsonObject.add("results", emotionArray);
            // 응답 설정
            res.setStatus(200);
            res.setContentType("application/json");
            res.getWriter().println(resultJsonObject);
        }
    }
	
	static class ModelInfo {
	    private String modelname;
	    private List<Map<String, String>> classes;
	    private String url;

	    // Getter와 Setter 메서드
	    public String getModelname() {
	        return modelname;
	    }

	    public void setModelname(String modelname) {
	        this.modelname = modelname;
	    }

	    public List<Map<String, String>> getClasses() {
	        return classes;
	    }

	    public void setClasses(List<Map<String, String>> classes) {
	        this.classes = classes;
	    }

	    public String getUrl() {
	        return url;
	    }

	    public void setUrl(String url) {
	        this.url = url;
	    }
	}


}

